#ifndef FLIGHT_DYNAMICS_H
#define FLIGHT_DYNAMICS_H

#include <cmath>



constexpr double EARTH_GRAVITY = 9.80665;           // Standard gravity in m/s²
constexpr double EARTH_RADIUS = 6378100.0;          // m (Mean Earth Radius)
constexpr double AIR_DENSITY_SEA_LEVEL = 1.225;     // kg/m^3
constexpr double GM_EARTH = 3.986e14;               // Earth's GM (m³/s²) ~ 3.986 × 10^14
constexpr double SCALE_HEIGHT = 8500.0;             // Required



class FlightDynamics {
public:
    /**
     * @brief Constructor that initializes the flight dynamics properties (critical for simulation)
     * @param mass The Initial mass of the rocket (kg) - (PENDING CHANGES)
     * @param thrust The Thrust force generated by engines (N) - (PENDING CHANGES)
     * @param burnRate The Fuel consumption rate per second (kg/s) - (PENDING CHANGES)
     * @param isp The Specific impulse of the engine (s) - (PENDING CHANGES)
     * @param dragArea The Cross-sectional area of the rocket for drag calculations (m²) - (PENDING CHANGES)
     */

    // Constructor: Initializes dynamics with SpaceX API data (reliable source)
    FlightDynamics(double rocketMass, double rocketFuel, double thrustSea, double thrustVac,
        double ispSea, double ispVac, double diameter, double burnTimeFirst, double burnTimeSecond);

    void update(double dt);  // Performs the simulation step
    double getAltitude() const;
    double getVelocity() const;
    double getFuel() const;
    double getThrust() const;
    double getDeltaV() const;
    double getDragForce() const;
    double getApoapsis() const;
    double getPeriapsis() const;
    int getCurrentStage() const;
    bool isStageSeparation() const;
    void advanceStage();

private:
    // Rocket parameters from API
    double initialMass;
    double mass;
    double fuel;
    double initialFuel;
    double thrustSeaLevel;
    double thrustVacuum;
    double ispSeaLevel;
    double ispVacuum;
    double dragArea;

    // Fuel Burn Factors
    double burnTimeFirstStage;
    double burnRateFirstStage;
    double burnTimeSecondStage;
    double burnRateSecondStage;
    double burnRate;  
    int currentStage;

    // Dynamic flight properties
    double velocity;
    double altitude;
    double thrust;
    double gravity;
    double deltaV;
    double dragForce;
    double apoapsis;
    double periapsis;

    // Private helper functions
    double getDragCoefficient(double mach, double altitude);
    double getDynamicThrust(double altitude) const;
};

#endif
